/*
 * MIT LICENSE
 *
 * Copyright Â© 2018, G.Ralph Kuntz, MD.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
)

type (
	// Desc contains a description of each HTML element that should be generated.
	// - Name is the Pascal-case version (e.g. BaseFont).
	// - JS is the lowercase version (e.g. basefont).
	// - Override is used if the JS version is not the lowercase of the name (e.g. Script -> s).
	// - Basic indicates that in "honnef.co/go/js/dom", we should use dom.BasicHTMLElement instead of
	//   HTMLXXXElement, where XXX is the element name (e.g. dom.HTMLAppletElement).
	// - DOM is the selected "honnef.co/go/js/dom" name (e.g. either dom.BasicHTMLElement or
	//   dom.HTMLAppletElement).
	Desc struct {
		Name       string
		JS         string
		Override   string
		Attributes []Attr
		Basic      bool // True if honnef.co/go/js/dom declares a specific Element type.
		DOM        string
	}

	// Attr contains information about each non-standard HTML attribute that an element supports.
	// - Name is the Pascal-case version (e.g. DataSrc).
	// - JS is the lowercase version (e.g. datasrc).
	// - Type is the Go type (e.g. bool) if it is not "string".
	Attr struct {
		Name string
		JS   string
		Type string
	}
)

func generate() {
	primary := template.Must(template.New("primary").Parse(primaryTemplate))
	test := template.Must(template.New("test").Parse(testTemplate))

	var names []string
	for k := range elements {
		names = append(names, k)
	}
	sort.Strings(names)

	var ele []Desc

	for _, n := range names {
		v := elements[n]
		v.Name = n
		v.JS = strings.ToLower(n)
		if v.Override != "" {
			v.Name = v.Override
		}

		v.DOM = fmt.Sprintf("HTML%sElement", v.Name)
		if v.Basic {
			v.DOM = "BasicHTMLElement"
		}

		for i := 0; i < len(v.Attributes); i++ {
			a := &v.Attributes[i]
			a.JS = strings.ToLower(a.Name)
			if a.Type == "" {
				a.Type = "string"
			}
		}

		ele = append(ele, v)
	}

	executeTemplate("gen_elements_elementGen.go", primary, ele)
	executeTemplate("gen_elements_elementGen_test.go", test, ele)
}

func executeTemplate(filename string, t *template.Template, ele []Desc) {
	var b bytes.Buffer

	if err := t.Execute(&b, ele); err != nil {
		panic(err)
	}

	formatted, err := format.Source(b.Bytes())
	if err != nil {
		panic(err)
	}

	f, err := os.Create(filepath.Join(*outputDirectory, filename))
	if err != nil {
		panic(err)
	}

	if _, err := f.Write(formatted); err != nil {
		panic(err)
	}
}

const (
	primaryTemplate = `
	// Copyright (c) 2018 Paul Jolly <paul@myitcv.org.uk>, all rights reserved.
	// Use of this document is governed by a license found in the LICENSE document.

	// Code generated by elementGen. DO NOT EDIT.

	package react

	{{ range . }}
	// {{ .Name }}Elem is the React element definition corresponding to the HTML <{{ .Name }}> element.
	type {{ .Name }}Elem struct {
		Element
	}

	// _{{ .Name }}Props defines the properties for the <{{ .Name }}> element.
	type _{{ .Name }}Props struct {
		*BasicHTMLElement	{{ if gt (len .Attributes) 0 }}

		{{ range .Attributes }}{{ .Name }} {{ .Type }} ` + "`js:\"{{ .JS }}\"`" + `
		{{ end }}
		{{ end }}
	}

	// A creates a new instance of a <{{ .JS }}> element with the provided props and children.
	func {{ .Name  }}(props *{{ .Name }}Props, children ...Element) *{{ .Name }}Elem {
		rProps := &_{{ .Name }}Props{
			BasicHTMLElement: newBasicHTMLElement(),
		}

		if props != nil {
			props.assign(rProps)
		}

		return &{{ .Name }}Elem{
			Element: createElement("{{ .JS }}", rProps, children...),
		}
	}
	{{ end }}
`
	testTemplate = `
	// +` + "build js" + `

	// Code generated by elementGen. DO NOT EDIT.

	package react_test

	import (
		"testing"

		"honnef.co/go/js/dom"

		"myitcv.io/react"
		"myitcv.io/react/testutils"
	)

	{{ range . }}
	func Test{{ .Name }}Elem(t *testing.T) {
		class := "test"

		x := testutils.Wrapper(react.{{ .Name  }}(&react.{{ .Name }}Props{ClassName: class}))
		cont := testutils.RenderIntoDocument(x)

		el := testutils.FindRenderedDOMComponentWithClass(cont, class)

		if _, ok := el.(*dom.{{ .DOM }}); !ok {
			t.Fatal("Failed to find <{{ .JS }}> element")
		}
	}
	{{ end }}
`
)

var (
	// elements contains all of the Go wrappers to generate for the underlying HTML elements.
	// Commented items have already been hand-written.
	elements = map[string]Desc{
		// "a"
		"Abbr": Desc{
			Basic: true,
		},
		"Acronym": Desc{
			Basic: true,
		},
		"Address": Desc{
			Basic: true,
		},
		"Applet": Desc{
			Attributes: []Attr{
				{Name: "Align"},
				{Name: "Alt"},
				{Name: "Archive"},
				{Name: "Code"},
				{Name: "Codebase"},
				{Name: "DataFld"},
				{Name: "DataSrc"},
				{Name: "Height"},
				{Name: "HSpace"},
				{Name: "MayScript"},
				{Name: "Name"},
				{Name: "Object"},
				{Name: "Src"},
				{Name: "VSpace"},
				{Name: "Width"},
			},
		},
		"Area": Desc{
			Attributes: []Attr{
				{Name: "Alt"},
				{Name: "Coords"},
				{Name: "Download"},
				{Name: "Href"},
				{Name: "HrefLang"},
				{Name: "Media"},
				{Name: "ReferrerPolicy"},
				{Name: "Rel"},
				{Name: "Shape"},
				{Name: "Target"},
			},
		},
		"Article": Desc{
			Basic: true,
		},
		"Aside": Desc{
			Basic: true,
		},
		"Audio": Desc{
			Attributes: []Attr{
				{Name: "AutoPlay"},
				{Name: "Buffered"},
				{Name: "Controls"},
				{Name: "Loop"},
				{Name: "MozCurrentSampleOffset"},
				{Name: "Muted"},
				{Name: "Played"},
				{Name: "Preload"},
				{Name: "Src"},
				{Name: "Volume"},
			},
		},
		"B": Desc{
			Basic: true,
		},
		"Base": Desc{
			Attributes: []Attr{
				{Name: "Href"},
				{Name: "Target"},
			},
		},
		"BaseFont": Desc{
			Attributes: []Attr{
				{Name: "Color"},
				{Name: "Face"},
				{Name: "Size"},
			},
			Basic: true,
		},
		"Bdi": Desc{
			Basic: true,
		},
		"Bdo": Desc{
			Basic: true,
		},
		"BlockQuote": Desc{
			Attributes: []Attr{
				{Name: "Cite"},
			},
			Basic: true,
		},
		"Body": Desc{
			Attributes: []Attr{
				{Name: "OnAfterPrint"},
				{Name: "OnBeforePrint"},
				{Name: "OnBeforeUnload"},
				{Name: "OnBlur"},
				{Name: "OnError"},
				{Name: "OnFocus"},
				{Name: "OnHashChange"},
				{Name: "OnLanguageChange"},
				{Name: "OnLoad"},
				{Name: "OnMessage"},
				{Name: "OnOffline"},
				{Name: "OnOnline"},
				{Name: "OnPopState"},
				{Name: "OnRedo"},
				{Name: "OnResize"},
				{Name: "OnStorage"},
				{Name: "OnUndo"},
				{Name: "OnUnload"},
			},
		},
		// "br"
		// "button"
		"Canvas": Desc{
			Attributes: []Attr{
				{Name: "Height"},
				{Name: "Width"},
			},
		},
		"Caption": Desc{
			Basic: true,
		},
		"Cite": Desc{
			Basic: true,
		},
		// "code"
		"Col": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
				{Name: "Span"},
			},
			Basic: true,
		},
		"Colgroup": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
				{Name: "Span"},
			},
			Basic: true,
		},
		"Data": Desc{
			Attributes: []Attr{
				{Name: "Value"},
			},
		},
		"DataList": Desc{},
		"DD": Desc{
			Basic: true,
		},
		"Del": Desc{
			Attributes: []Attr{
				{Name: "Cite"},
				{Name: "DateTime"},
			},
			Basic: true,
		},
		"Details": Desc{
			Attributes: []Attr{
				{Name: "Open", Type: "bool"},
			},
			Basic: true,
		},
		"Dfn": Desc{
			Basic: true,
		},
		"Dialog": Desc{
			Attributes: []Attr{
				{Name: "Open", Type: "bool"},
			},
			Basic: true,
		},
		// "div"
		"Dl": Desc{
			Basic: true,
		},
		"Dt": Desc{
			Basic: true,
		},
		"Em": Desc{
			Basic: true,
		},
		"Embed": Desc{
			Attributes: []Attr{
				{Name: "Height"},
				{Name: "Src"},
				{Name: "Type"},
				{Name: "Width"},
			},
		},
		"FieldSet": Desc{
			Attributes: []Attr{
				{Name: "Disabled", Type: "bool"},
				{Name: "Form"},
				{Name: "Name"},
			},
		},
		"FigCaption": Desc{
			Basic: true,
		},
		"Figure": Desc{
			Basic: true,
		},
		// "footer"
		// "form"
		// "h1"
		"H2": Desc{
			Basic: true,
		},
		// "h3"
		// "h4"
		"H5": Desc{
			Basic: true,
		},
		"H6": Desc{
			Basic: true,
		},
		"Head": Desc{},
		"Header": Desc{
			Basic: true,
		},
		"HGroup": Desc{
			Basic: true,
		},
		// "hr"
		"HTML": Desc{
			Attributes: []Attr{
				{Name: "XMLNS"},
			},
			Basic: true,
		},
		// "i"
		// "iframe"
		// "img"
		// "input"
		"Ins": Desc{
			Attributes: []Attr{
				{Name: "Cite"},
				{Name: "DateTime"},
			},
			Basic: true,
		},
		"Kbd": Desc{
			Basic: true,
		},
		// "label"
		"Legend": Desc{},
		// "li"
		"Link": Desc{
			Attributes: []Attr{
				{Name: "As"},
				{Name: "CrossOrigin"},
				{Name: "Disabled", Type: "bool"},
				{Name: "Href"},
				{Name: "HrefLang"},
				{Name: "Integrity"},
				{Name: "Media"},
				{Name: "Methods"},
				{Name: "Prefetch"},
				{Name: "ReferrerPolicy"},
				{Name: "Rel"},
				{Name: "Sizes"},
				{Name: "Target"},
				{Name: "Type"},
			},
		},
		"Main": Desc{
			Basic: true,
		},
		"Map": Desc{
			Attributes: []Attr{
				{Name: "Name"},
			},
		},
		"Mark": Desc{
			Basic: true,
		},
		"Menu": Desc{
			Attributes: []Attr{
				{Name: "Type"},
			},
		},
		"Meta": Desc{
			Attributes: []Attr{
				{Name: "CharSet"},
				{Name: "Content"},
				{Name: "HTTPEquiv"},
				{Name: "Name"},
			},
		},
		"Meter": Desc{
			Attributes: []Attr{
				{Name: "Value", Type: "float64"},
				{Name: "Min", Type: "float64"},
				{Name: "Max", Type: "float64"},
				{Name: "Low", Type: "float64"},
				{Name: "High", Type: "float64"},
				{Name: "Optimum", Type: "float64"},
				{Name: "Form"},
			},
		},
		// "nav"
		"NoScript": Desc{
			Basic: true,
		},
		"Object": Desc{
			Attributes: []Attr{
				{Name: "Data"},
				{Name: "Form"},
				{Name: "Height"},
				{Name: "Name"},
				{Name: "Type"},
				{Name: "TypeMustMatch"},
				{Name: "UseMap"},
				{Name: "Width"},
			},
		},
		"Ol": Desc{
			Attributes: []Attr{
				{Name: "Compact"},
				{Name: "Reversed", Type: "bool"},
				{Name: "Start"},
				{Name: "Type"},
			},
			Basic: true,
		},
		"OptGroup": Desc{
			Attributes: []Attr{
				{Name: "Disabled", Type: "bool"},
				{Name: "Label"},
			},
		},
		// "option"
		"Output": Desc{
			Attributes: []Attr{
				{Name: "For"},
				{Name: "Form"},
				{Name: "Name"},
			},
		},
		// "p"
		"Param": Desc{
			Attributes: []Attr{
				{Name: "Name"},
				{Name: "Value"},
			},
		},
		"Picture": Desc{
			Basic: true,
		},
		// "pre"
		"Progress": Desc{
			Attributes: []Attr{
				{Name: "Max", Type: "float64"},
				{Name: "Value", Type: "float64"},
			},
		},
		"Q": Desc{
			Attributes: []Attr{
				{Name: "Cite"},
			},
			Basic: true,
		},
		"RP": Desc{
			Basic: true,
		},
		"RT": Desc{
			Basic: true,
		},
		"RTC": Desc{
			Basic: true,
		},
		"Ruby": Desc{
			Basic: true,
		},
		"Strike": Desc{
			Override: "Strike", // The name is different from <s> because of an identifier name conflict.
			Basic:    true,
		},
		"Samp": Desc{
			Basic: true,
		},
		"Script": Desc{
			Attributes: []Attr{
				{Name: "Async"},
				{Name: "CrossOrigin"},
				{Name: "Defer"},
				{Name: "Integrity"},
				{Name: "NoModule"},
				{Name: "Nonce"},
				{Name: "Src"},
				{Name: "Text"},
				{Name: "Type"},
			},
		},
		"Section": Desc{
			Basic: true,
		},
		// "select"
		"Slot": Desc{
			Attributes: []Attr{
				{Name: "Name"},
			},
			Basic: true,
		},
		"Small": Desc{
			Basic: true,
		},
		"Source": Desc{
			Attributes: []Attr{
				{Name: "Sizes"},
				{Name: "Src"},
				{Name: "SrcSet"},
				{Name: "Type"},
				{Name: "Media"},
			},
		},
		// "span"
		"Strong": Desc{
			Basic: true,
		},
		"Style": Desc{
			Attributes: []Attr{
				{Name: "Type"},
				{Name: "Media"},
				{Name: "Nonce"},
			},
		},
		"Sub": Desc{
			Basic: true,
		},
		// "table"
		"Tbody": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
			},
			Basic: true,
		},
		"Td": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
				{Name: "ColSpan"},
				{Name: "Headers"},
				{Name: "RowSpan"},
			},
			Basic: true,
		},
		"Template": Desc{
			Basic: true,
		},
		"Tfoot": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
			},
			Basic: true,
		},
		"Th": Desc{
			Attributes: []Attr{
				{Name: "Abbr"},
				{Name: "BGColor"},
				{Name: "ColSpan"},
				{Name: "Headers"},
				{Name: "RowSpan"},
				{Name: "Scope"},
			},
			Basic: true,
		},
		"Thead": Desc{
			Attributes: []Attr{
				{Name: "BGColor"},
			},
			Basic: true,
		},
		"Time": Desc{
			Attributes: []Attr{
				{Name: "DateTime"},
			},
		},
		"Title": Desc{},
		"Tr": Desc{
			Basic: true,
		},
		"Track": Desc{
			Attributes: []Attr{
				{Name: "Default", Type: "bool"},
				{Name: "Kind"},
				{Name: "Label"},
				{Name: "Src"},
				{Name: "SrcLang"},
			},
		},
		"U": Desc{
			Basic: true,
		},
		// "ul"
		"Var": Desc{
			Basic: true,
		},
		"Video": Desc{
			Attributes: []Attr{
				{Name: "Autoplay"},
				{Name: "Buffered"},
				{Name: "Controls"},
				{Name: "CrossOrigin"},
				{Name: "Height"},
				{Name: "Loop"},
				{Name: "Muted"},
				{Name: "Played"},
				{Name: "Preload"},
				{Name: "Poster"},
				{Name: "Src"},
				{Name: "Width"},
				{Name: "PlaysInline"},
			},
		},
		"Wbr": Desc{
			Basic: true,
		},
	}
)
