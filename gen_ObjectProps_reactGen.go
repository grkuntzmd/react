// Code generated by reactGen. DO NOT EDIT.

package react

// ObjectProps defines the properties for the <Object> element.
type ObjectProps struct {
	AriaExpanded            bool
	AriaHasPopup            bool
	AriaLabelledBy          string
	ClassName               string
	DangerouslySetInnerHTML *DangerousInnerHTML
	Data                    string
	DataSet
	Form   string
	Height string
	ID     string
	Key    string
	Name   string

	OnChange
	OnClick

	Ref
	Role          string
	Style         *CSS
	Type          string
	TypeMustMatch string
	UseMap        string
	Width         string
}

func (o *ObjectProps) assign(_v *_ObjectProps) {

	_v.AriaExpanded = o.AriaExpanded

	_v.AriaHasPopup = o.AriaHasPopup

	_v.AriaLabelledBy = o.AriaLabelledBy

	_v.ClassName = o.ClassName

	_v.DangerouslySetInnerHTML = o.DangerouslySetInnerHTML

	_v.Data = o.Data

	if o.DataSet != nil {
		for dk, dv := range o.DataSet {
			_v.o.Set("data-"+dk, dv)
		}
	}

	_v.Form = o.Form

	_v.Height = o.Height

	if o.ID != "" {
		_v.ID = o.ID
	}

	if o.Key != "" {
		_v.Key = o.Key
	}

	_v.Name = o.Name

	if o.OnChange != nil {
		_v.o.Set("onChange", o.OnChange.OnChange)
	}

	if o.OnClick != nil {
		_v.o.Set("onClick", o.OnClick.OnClick)
	}

	if o.Ref != nil {
		_v.o.Set("ref", o.Ref.Ref)
	}

	_v.Role = o.Role

	// TODO: until we have a resolution on
	// https://github.com/gopherjs/gopherjs/issues/236
	_v.Style = o.Style.hack()

	_v.Type = o.Type

	_v.TypeMustMatch = o.TypeMustMatch

	_v.UseMap = o.UseMap

	_v.Width = o.Width

}
