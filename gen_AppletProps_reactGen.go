// Code generated by reactGen. DO NOT EDIT.

package react

// AppletProps defines the properties for the <Applet> element.
type AppletProps struct {
	Align                   string
	Alt                     string
	Archive                 string
	AriaExpanded            bool
	AriaHasPopup            bool
	AriaLabelledBy          string
	ClassName               string
	Code                    string
	Codebase                string
	DangerouslySetInnerHTML *DangerousInnerHTML
	DataFld                 string
	DataSet
	DataSrc   string
	HSpace    string
	Height    string
	ID        string
	Key       string
	MayScript string
	Name      string
	Object    string

	OnChange
	OnClick

	Ref
	Role   string
	Src    string
	Style  *CSS
	VSpace string
	Width  string
}

func (a *AppletProps) assign(_v *_AppletProps) {

	_v.Align = a.Align

	_v.Alt = a.Alt

	_v.Archive = a.Archive

	_v.AriaExpanded = a.AriaExpanded

	_v.AriaHasPopup = a.AriaHasPopup

	_v.AriaLabelledBy = a.AriaLabelledBy

	_v.ClassName = a.ClassName

	_v.Code = a.Code

	_v.Codebase = a.Codebase

	_v.DangerouslySetInnerHTML = a.DangerouslySetInnerHTML

	_v.DataFld = a.DataFld

	if a.DataSet != nil {
		for dk, dv := range a.DataSet {
			_v.o.Set("data-"+dk, dv)
		}
	}

	_v.DataSrc = a.DataSrc

	_v.HSpace = a.HSpace

	_v.Height = a.Height

	if a.ID != "" {
		_v.ID = a.ID
	}

	if a.Key != "" {
		_v.Key = a.Key
	}

	_v.MayScript = a.MayScript

	_v.Name = a.Name

	_v.Object = a.Object

	if a.OnChange != nil {
		_v.o.Set("onChange", a.OnChange.OnChange)
	}

	if a.OnClick != nil {
		_v.o.Set("onClick", a.OnClick.OnClick)
	}

	if a.Ref != nil {
		_v.o.Set("ref", a.Ref.Ref)
	}

	_v.Role = a.Role

	_v.Src = a.Src

	// TODO: until we have a resolution on
	// https://github.com/gopherjs/gopherjs/issues/236
	_v.Style = a.Style.hack()

	_v.VSpace = a.VSpace

	_v.Width = a.Width

}
