// Code generated by reactGen. DO NOT EDIT.

package react

// VideoProps defines the properties for the <Video> element.
type VideoProps struct {
	AriaExpanded            bool
	AriaHasPopup            bool
	AriaLabelledBy          string
	Autoplay                string
	Buffered                string
	ClassName               string
	Controls                string
	CrossOrigin             string
	DangerouslySetInnerHTML *DangerousInnerHTML
	DataSet
	Height string
	ID     string
	Key    string
	Loop   string
	Muted  string

	OnChange
	OnClick

	Played      string
	PlaysInline string
	Poster      string
	Preload     string
	Ref
	Role  string
	Src   string
	Style *CSS
	Width string
}

func (v *VideoProps) assign(_v *_VideoProps) {

	_v.AriaExpanded = v.AriaExpanded

	_v.AriaHasPopup = v.AriaHasPopup

	_v.AriaLabelledBy = v.AriaLabelledBy

	_v.Autoplay = v.Autoplay

	_v.Buffered = v.Buffered

	_v.ClassName = v.ClassName

	_v.Controls = v.Controls

	_v.CrossOrigin = v.CrossOrigin

	_v.DangerouslySetInnerHTML = v.DangerouslySetInnerHTML

	if v.DataSet != nil {
		for dk, dv := range v.DataSet {
			_v.o.Set("data-"+dk, dv)
		}
	}

	_v.Height = v.Height

	if v.ID != "" {
		_v.ID = v.ID
	}

	if v.Key != "" {
		_v.Key = v.Key
	}

	_v.Loop = v.Loop

	_v.Muted = v.Muted

	if v.OnChange != nil {
		_v.o.Set("onChange", v.OnChange.OnChange)
	}

	if v.OnClick != nil {
		_v.o.Set("onClick", v.OnClick.OnClick)
	}

	_v.Played = v.Played

	_v.PlaysInline = v.PlaysInline

	_v.Poster = v.Poster

	_v.Preload = v.Preload

	if v.Ref != nil {
		_v.o.Set("ref", v.Ref.Ref)
	}

	_v.Role = v.Role

	_v.Src = v.Src

	// TODO: until we have a resolution on
	// https://github.com/gopherjs/gopherjs/issues/236
	_v.Style = v.Style.hack()

	_v.Width = v.Width

}
