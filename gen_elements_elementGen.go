// Copyright (c) 2018 Paul Jolly <paul@myitcv.org.uk>, all rights reserved.
// Use of this document is governed by a license found in the LICENSE document.

// Code generated by elementGen. DO NOT EDIT.

package react

// AbbrElem is the React element definition corresponding to the HTML <Abbr> element.
type AbbrElem struct {
	Element
}

// _AbbrProps defines the properties for the <Abbr> element.
type _AbbrProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <abbr> element with the provided props and children.
func Abbr(props *AbbrProps, children ...Element) *AbbrElem {
	rProps := &_AbbrProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AbbrElem{
		Element: createElement("abbr", rProps, children...),
	}
}

// AcronymElem is the React element definition corresponding to the HTML <Acronym> element.
type AcronymElem struct {
	Element
}

// _AcronymProps defines the properties for the <Acronym> element.
type _AcronymProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <acronym> element with the provided props and children.
func Acronym(props *AcronymProps, children ...Element) *AcronymElem {
	rProps := &_AcronymProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AcronymElem{
		Element: createElement("acronym", rProps, children...),
	}
}

// AddressElem is the React element definition corresponding to the HTML <Address> element.
type AddressElem struct {
	Element
}

// _AddressProps defines the properties for the <Address> element.
type _AddressProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <address> element with the provided props and children.
func Address(props *AddressProps, children ...Element) *AddressElem {
	rProps := &_AddressProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AddressElem{
		Element: createElement("address", rProps, children...),
	}
}

// AppletElem is the React element definition corresponding to the HTML <Applet> element.
type AppletElem struct {
	Element
}

// _AppletProps defines the properties for the <Applet> element.
type _AppletProps struct {
	*BasicHTMLElement

	Align     string `js:"align"`
	Alt       string `js:"alt"`
	Archive   string `js:"archive"`
	Code      string `js:"code"`
	Codebase  string `js:"codebase"`
	DataFld   string `js:"datafld"`
	DataSrc   string `js:"datasrc"`
	Height    string `js:"height"`
	HSpace    string `js:"hspace"`
	MayScript string `js:"mayscript"`
	Name      string `js:"name"`
	Object    string `js:"object"`
	Src       string `js:"src"`
	VSpace    string `js:"vspace"`
	Width     string `js:"width"`
}

// A creates a new instance of a <applet> element with the provided props and children.
func Applet(props *AppletProps, children ...Element) *AppletElem {
	rProps := &_AppletProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AppletElem{
		Element: createElement("applet", rProps, children...),
	}
}

// AreaElem is the React element definition corresponding to the HTML <Area> element.
type AreaElem struct {
	Element
}

// _AreaProps defines the properties for the <Area> element.
type _AreaProps struct {
	*BasicHTMLElement

	Alt            string `js:"alt"`
	Coords         string `js:"coords"`
	Download       string `js:"download"`
	Href           string `js:"href"`
	HrefLang       string `js:"hreflang"`
	Media          string `js:"media"`
	ReferrerPolicy string `js:"referrerpolicy"`
	Rel            string `js:"rel"`
	Shape          string `js:"shape"`
	Target         string `js:"target"`
}

// A creates a new instance of a <area> element with the provided props and children.
func Area(props *AreaProps, children ...Element) *AreaElem {
	rProps := &_AreaProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AreaElem{
		Element: createElement("area", rProps, children...),
	}
}

// ArticleElem is the React element definition corresponding to the HTML <Article> element.
type ArticleElem struct {
	Element
}

// _ArticleProps defines the properties for the <Article> element.
type _ArticleProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <article> element with the provided props and children.
func Article(props *ArticleProps, children ...Element) *ArticleElem {
	rProps := &_ArticleProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ArticleElem{
		Element: createElement("article", rProps, children...),
	}
}

// AsideElem is the React element definition corresponding to the HTML <Aside> element.
type AsideElem struct {
	Element
}

// _AsideProps defines the properties for the <Aside> element.
type _AsideProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <aside> element with the provided props and children.
func Aside(props *AsideProps, children ...Element) *AsideElem {
	rProps := &_AsideProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AsideElem{
		Element: createElement("aside", rProps, children...),
	}
}

// AudioElem is the React element definition corresponding to the HTML <Audio> element.
type AudioElem struct {
	Element
}

// _AudioProps defines the properties for the <Audio> element.
type _AudioProps struct {
	*BasicHTMLElement

	AutoPlay               string `js:"autoplay"`
	Buffered               string `js:"buffered"`
	Controls               string `js:"controls"`
	Loop                   string `js:"loop"`
	MozCurrentSampleOffset string `js:"mozcurrentsampleoffset"`
	Muted                  string `js:"muted"`
	Played                 string `js:"played"`
	Preload                string `js:"preload"`
	Src                    string `js:"src"`
	Volume                 string `js:"volume"`
}

// A creates a new instance of a <audio> element with the provided props and children.
func Audio(props *AudioProps, children ...Element) *AudioElem {
	rProps := &_AudioProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &AudioElem{
		Element: createElement("audio", rProps, children...),
	}
}

// BElem is the React element definition corresponding to the HTML <B> element.
type BElem struct {
	Element
}

// _BProps defines the properties for the <B> element.
type _BProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <b> element with the provided props and children.
func B(props *BProps, children ...Element) *BElem {
	rProps := &_BProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BElem{
		Element: createElement("b", rProps, children...),
	}
}

// BaseElem is the React element definition corresponding to the HTML <Base> element.
type BaseElem struct {
	Element
}

// _BaseProps defines the properties for the <Base> element.
type _BaseProps struct {
	*BasicHTMLElement

	Href   string `js:"href"`
	Target string `js:"target"`
}

// A creates a new instance of a <base> element with the provided props and children.
func Base(props *BaseProps, children ...Element) *BaseElem {
	rProps := &_BaseProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BaseElem{
		Element: createElement("base", rProps, children...),
	}
}

// BaseFontElem is the React element definition corresponding to the HTML <BaseFont> element.
type BaseFontElem struct {
	Element
}

// _BaseFontProps defines the properties for the <BaseFont> element.
type _BaseFontProps struct {
	*BasicHTMLElement

	Color string `js:"color"`
	Face  string `js:"face"`
	Size  string `js:"size"`
}

// A creates a new instance of a <basefont> element with the provided props and children.
func BaseFont(props *BaseFontProps, children ...Element) *BaseFontElem {
	rProps := &_BaseFontProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BaseFontElem{
		Element: createElement("basefont", rProps, children...),
	}
}

// BdiElem is the React element definition corresponding to the HTML <Bdi> element.
type BdiElem struct {
	Element
}

// _BdiProps defines the properties for the <Bdi> element.
type _BdiProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <bdi> element with the provided props and children.
func Bdi(props *BdiProps, children ...Element) *BdiElem {
	rProps := &_BdiProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BdiElem{
		Element: createElement("bdi", rProps, children...),
	}
}

// BdoElem is the React element definition corresponding to the HTML <Bdo> element.
type BdoElem struct {
	Element
}

// _BdoProps defines the properties for the <Bdo> element.
type _BdoProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <bdo> element with the provided props and children.
func Bdo(props *BdoProps, children ...Element) *BdoElem {
	rProps := &_BdoProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BdoElem{
		Element: createElement("bdo", rProps, children...),
	}
}

// BlockQuoteElem is the React element definition corresponding to the HTML <BlockQuote> element.
type BlockQuoteElem struct {
	Element
}

// _BlockQuoteProps defines the properties for the <BlockQuote> element.
type _BlockQuoteProps struct {
	*BasicHTMLElement

	Cite string `js:"cite"`
}

// A creates a new instance of a <blockquote> element with the provided props and children.
func BlockQuote(props *BlockQuoteProps, children ...Element) *BlockQuoteElem {
	rProps := &_BlockQuoteProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BlockQuoteElem{
		Element: createElement("blockquote", rProps, children...),
	}
}

// BodyElem is the React element definition corresponding to the HTML <Body> element.
type BodyElem struct {
	Element
}

// _BodyProps defines the properties for the <Body> element.
type _BodyProps struct {
	*BasicHTMLElement

	OnAfterPrint     string `js:"onafterprint"`
	OnBeforePrint    string `js:"onbeforeprint"`
	OnBeforeUnload   string `js:"onbeforeunload"`
	OnBlur           string `js:"onblur"`
	OnError          string `js:"onerror"`
	OnFocus          string `js:"onfocus"`
	OnHashChange     string `js:"onhashchange"`
	OnLanguageChange string `js:"onlanguagechange"`
	OnLoad           string `js:"onload"`
	OnMessage        string `js:"onmessage"`
	OnOffline        string `js:"onoffline"`
	OnOnline         string `js:"ononline"`
	OnPopState       string `js:"onpopstate"`
	OnRedo           string `js:"onredo"`
	OnResize         string `js:"onresize"`
	OnStorage        string `js:"onstorage"`
	OnUndo           string `js:"onundo"`
	OnUnload         string `js:"onunload"`
}

// A creates a new instance of a <body> element with the provided props and children.
func Body(props *BodyProps, children ...Element) *BodyElem {
	rProps := &_BodyProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &BodyElem{
		Element: createElement("body", rProps, children...),
	}
}

// CanvasElem is the React element definition corresponding to the HTML <Canvas> element.
type CanvasElem struct {
	Element
}

// _CanvasProps defines the properties for the <Canvas> element.
type _CanvasProps struct {
	*BasicHTMLElement

	Height string `js:"height"`
	Width  string `js:"width"`
}

// A creates a new instance of a <canvas> element with the provided props and children.
func Canvas(props *CanvasProps, children ...Element) *CanvasElem {
	rProps := &_CanvasProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &CanvasElem{
		Element: createElement("canvas", rProps, children...),
	}
}

// CaptionElem is the React element definition corresponding to the HTML <Caption> element.
type CaptionElem struct {
	Element
}

// _CaptionProps defines the properties for the <Caption> element.
type _CaptionProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <caption> element with the provided props and children.
func Caption(props *CaptionProps, children ...Element) *CaptionElem {
	rProps := &_CaptionProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &CaptionElem{
		Element: createElement("caption", rProps, children...),
	}
}

// CiteElem is the React element definition corresponding to the HTML <Cite> element.
type CiteElem struct {
	Element
}

// _CiteProps defines the properties for the <Cite> element.
type _CiteProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <cite> element with the provided props and children.
func Cite(props *CiteProps, children ...Element) *CiteElem {
	rProps := &_CiteProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &CiteElem{
		Element: createElement("cite", rProps, children...),
	}
}

// ColElem is the React element definition corresponding to the HTML <Col> element.
type ColElem struct {
	Element
}

// _ColProps defines the properties for the <Col> element.
type _ColProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
	Span    string `js:"span"`
}

// A creates a new instance of a <col> element with the provided props and children.
func Col(props *ColProps, children ...Element) *ColElem {
	rProps := &_ColProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ColElem{
		Element: createElement("col", rProps, children...),
	}
}

// ColgroupElem is the React element definition corresponding to the HTML <Colgroup> element.
type ColgroupElem struct {
	Element
}

// _ColgroupProps defines the properties for the <Colgroup> element.
type _ColgroupProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
	Span    string `js:"span"`
}

// A creates a new instance of a <colgroup> element with the provided props and children.
func Colgroup(props *ColgroupProps, children ...Element) *ColgroupElem {
	rProps := &_ColgroupProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ColgroupElem{
		Element: createElement("colgroup", rProps, children...),
	}
}

// DDElem is the React element definition corresponding to the HTML <DD> element.
type DDElem struct {
	Element
}

// _DDProps defines the properties for the <DD> element.
type _DDProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <dd> element with the provided props and children.
func DD(props *DDProps, children ...Element) *DDElem {
	rProps := &_DDProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DDElem{
		Element: createElement("dd", rProps, children...),
	}
}

// DataElem is the React element definition corresponding to the HTML <Data> element.
type DataElem struct {
	Element
}

// _DataProps defines the properties for the <Data> element.
type _DataProps struct {
	*BasicHTMLElement

	Value string `js:"value"`
}

// A creates a new instance of a <data> element with the provided props and children.
func Data(props *DataProps, children ...Element) *DataElem {
	rProps := &_DataProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DataElem{
		Element: createElement("data", rProps, children...),
	}
}

// DataListElem is the React element definition corresponding to the HTML <DataList> element.
type DataListElem struct {
	Element
}

// _DataListProps defines the properties for the <DataList> element.
type _DataListProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <datalist> element with the provided props and children.
func DataList(props *DataListProps, children ...Element) *DataListElem {
	rProps := &_DataListProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DataListElem{
		Element: createElement("datalist", rProps, children...),
	}
}

// DelElem is the React element definition corresponding to the HTML <Del> element.
type DelElem struct {
	Element
}

// _DelProps defines the properties for the <Del> element.
type _DelProps struct {
	*BasicHTMLElement

	Cite     string `js:"cite"`
	DateTime string `js:"datetime"`
}

// A creates a new instance of a <del> element with the provided props and children.
func Del(props *DelProps, children ...Element) *DelElem {
	rProps := &_DelProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DelElem{
		Element: createElement("del", rProps, children...),
	}
}

// DetailsElem is the React element definition corresponding to the HTML <Details> element.
type DetailsElem struct {
	Element
}

// _DetailsProps defines the properties for the <Details> element.
type _DetailsProps struct {
	*BasicHTMLElement

	Open bool `js:"open"`
}

// A creates a new instance of a <details> element with the provided props and children.
func Details(props *DetailsProps, children ...Element) *DetailsElem {
	rProps := &_DetailsProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DetailsElem{
		Element: createElement("details", rProps, children...),
	}
}

// DfnElem is the React element definition corresponding to the HTML <Dfn> element.
type DfnElem struct {
	Element
}

// _DfnProps defines the properties for the <Dfn> element.
type _DfnProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <dfn> element with the provided props and children.
func Dfn(props *DfnProps, children ...Element) *DfnElem {
	rProps := &_DfnProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DfnElem{
		Element: createElement("dfn", rProps, children...),
	}
}

// DialogElem is the React element definition corresponding to the HTML <Dialog> element.
type DialogElem struct {
	Element
}

// _DialogProps defines the properties for the <Dialog> element.
type _DialogProps struct {
	*BasicHTMLElement

	Open bool `js:"open"`
}

// A creates a new instance of a <dialog> element with the provided props and children.
func Dialog(props *DialogProps, children ...Element) *DialogElem {
	rProps := &_DialogProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DialogElem{
		Element: createElement("dialog", rProps, children...),
	}
}

// DlElem is the React element definition corresponding to the HTML <Dl> element.
type DlElem struct {
	Element
}

// _DlProps defines the properties for the <Dl> element.
type _DlProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <dl> element with the provided props and children.
func Dl(props *DlProps, children ...Element) *DlElem {
	rProps := &_DlProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DlElem{
		Element: createElement("dl", rProps, children...),
	}
}

// DtElem is the React element definition corresponding to the HTML <Dt> element.
type DtElem struct {
	Element
}

// _DtProps defines the properties for the <Dt> element.
type _DtProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <dt> element with the provided props and children.
func Dt(props *DtProps, children ...Element) *DtElem {
	rProps := &_DtProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &DtElem{
		Element: createElement("dt", rProps, children...),
	}
}

// EmElem is the React element definition corresponding to the HTML <Em> element.
type EmElem struct {
	Element
}

// _EmProps defines the properties for the <Em> element.
type _EmProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <em> element with the provided props and children.
func Em(props *EmProps, children ...Element) *EmElem {
	rProps := &_EmProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &EmElem{
		Element: createElement("em", rProps, children...),
	}
}

// EmbedElem is the React element definition corresponding to the HTML <Embed> element.
type EmbedElem struct {
	Element
}

// _EmbedProps defines the properties for the <Embed> element.
type _EmbedProps struct {
	*BasicHTMLElement

	Height string `js:"height"`
	Src    string `js:"src"`
	Type   string `js:"type"`
	Width  string `js:"width"`
}

// A creates a new instance of a <embed> element with the provided props and children.
func Embed(props *EmbedProps, children ...Element) *EmbedElem {
	rProps := &_EmbedProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &EmbedElem{
		Element: createElement("embed", rProps, children...),
	}
}

// FieldSetElem is the React element definition corresponding to the HTML <FieldSet> element.
type FieldSetElem struct {
	Element
}

// _FieldSetProps defines the properties for the <FieldSet> element.
type _FieldSetProps struct {
	*BasicHTMLElement

	Disabled bool   `js:"disabled"`
	Form     string `js:"form"`
	Name     string `js:"name"`
}

// A creates a new instance of a <fieldset> element with the provided props and children.
func FieldSet(props *FieldSetProps, children ...Element) *FieldSetElem {
	rProps := &_FieldSetProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &FieldSetElem{
		Element: createElement("fieldset", rProps, children...),
	}
}

// FigCaptionElem is the React element definition corresponding to the HTML <FigCaption> element.
type FigCaptionElem struct {
	Element
}

// _FigCaptionProps defines the properties for the <FigCaption> element.
type _FigCaptionProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <figcaption> element with the provided props and children.
func FigCaption(props *FigCaptionProps, children ...Element) *FigCaptionElem {
	rProps := &_FigCaptionProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &FigCaptionElem{
		Element: createElement("figcaption", rProps, children...),
	}
}

// FigureElem is the React element definition corresponding to the HTML <Figure> element.
type FigureElem struct {
	Element
}

// _FigureProps defines the properties for the <Figure> element.
type _FigureProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <figure> element with the provided props and children.
func Figure(props *FigureProps, children ...Element) *FigureElem {
	rProps := &_FigureProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &FigureElem{
		Element: createElement("figure", rProps, children...),
	}
}

// H2Elem is the React element definition corresponding to the HTML <H2> element.
type H2Elem struct {
	Element
}

// _H2Props defines the properties for the <H2> element.
type _H2Props struct {
	*BasicHTMLElement
}

// A creates a new instance of a <h2> element with the provided props and children.
func H2(props *H2Props, children ...Element) *H2Elem {
	rProps := &_H2Props{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &H2Elem{
		Element: createElement("h2", rProps, children...),
	}
}

// H5Elem is the React element definition corresponding to the HTML <H5> element.
type H5Elem struct {
	Element
}

// _H5Props defines the properties for the <H5> element.
type _H5Props struct {
	*BasicHTMLElement
}

// A creates a new instance of a <h5> element with the provided props and children.
func H5(props *H5Props, children ...Element) *H5Elem {
	rProps := &_H5Props{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &H5Elem{
		Element: createElement("h5", rProps, children...),
	}
}

// H6Elem is the React element definition corresponding to the HTML <H6> element.
type H6Elem struct {
	Element
}

// _H6Props defines the properties for the <H6> element.
type _H6Props struct {
	*BasicHTMLElement
}

// A creates a new instance of a <h6> element with the provided props and children.
func H6(props *H6Props, children ...Element) *H6Elem {
	rProps := &_H6Props{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &H6Elem{
		Element: createElement("h6", rProps, children...),
	}
}

// HGroupElem is the React element definition corresponding to the HTML <HGroup> element.
type HGroupElem struct {
	Element
}

// _HGroupProps defines the properties for the <HGroup> element.
type _HGroupProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <hgroup> element with the provided props and children.
func HGroup(props *HGroupProps, children ...Element) *HGroupElem {
	rProps := &_HGroupProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &HGroupElem{
		Element: createElement("hgroup", rProps, children...),
	}
}

// HTMLElem is the React element definition corresponding to the HTML <HTML> element.
type HTMLElem struct {
	Element
}

// _HTMLProps defines the properties for the <HTML> element.
type _HTMLProps struct {
	*BasicHTMLElement

	XMLNS string `js:"xmlns"`
}

// A creates a new instance of a <html> element with the provided props and children.
func HTML(props *HTMLProps, children ...Element) *HTMLElem {
	rProps := &_HTMLProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &HTMLElem{
		Element: createElement("html", rProps, children...),
	}
}

// HeadElem is the React element definition corresponding to the HTML <Head> element.
type HeadElem struct {
	Element
}

// _HeadProps defines the properties for the <Head> element.
type _HeadProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <head> element with the provided props and children.
func Head(props *HeadProps, children ...Element) *HeadElem {
	rProps := &_HeadProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &HeadElem{
		Element: createElement("head", rProps, children...),
	}
}

// HeaderElem is the React element definition corresponding to the HTML <Header> element.
type HeaderElem struct {
	Element
}

// _HeaderProps defines the properties for the <Header> element.
type _HeaderProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <header> element with the provided props and children.
func Header(props *HeaderProps, children ...Element) *HeaderElem {
	rProps := &_HeaderProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &HeaderElem{
		Element: createElement("header", rProps, children...),
	}
}

// InsElem is the React element definition corresponding to the HTML <Ins> element.
type InsElem struct {
	Element
}

// _InsProps defines the properties for the <Ins> element.
type _InsProps struct {
	*BasicHTMLElement

	Cite     string `js:"cite"`
	DateTime string `js:"datetime"`
}

// A creates a new instance of a <ins> element with the provided props and children.
func Ins(props *InsProps, children ...Element) *InsElem {
	rProps := &_InsProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &InsElem{
		Element: createElement("ins", rProps, children...),
	}
}

// KbdElem is the React element definition corresponding to the HTML <Kbd> element.
type KbdElem struct {
	Element
}

// _KbdProps defines the properties for the <Kbd> element.
type _KbdProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <kbd> element with the provided props and children.
func Kbd(props *KbdProps, children ...Element) *KbdElem {
	rProps := &_KbdProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &KbdElem{
		Element: createElement("kbd", rProps, children...),
	}
}

// LegendElem is the React element definition corresponding to the HTML <Legend> element.
type LegendElem struct {
	Element
}

// _LegendProps defines the properties for the <Legend> element.
type _LegendProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <legend> element with the provided props and children.
func Legend(props *LegendProps, children ...Element) *LegendElem {
	rProps := &_LegendProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &LegendElem{
		Element: createElement("legend", rProps, children...),
	}
}

// LinkElem is the React element definition corresponding to the HTML <Link> element.
type LinkElem struct {
	Element
}

// _LinkProps defines the properties for the <Link> element.
type _LinkProps struct {
	*BasicHTMLElement

	As             string `js:"as"`
	CrossOrigin    string `js:"crossorigin"`
	Disabled       bool   `js:"disabled"`
	Href           string `js:"href"`
	HrefLang       string `js:"hreflang"`
	Integrity      string `js:"integrity"`
	Media          string `js:"media"`
	Methods        string `js:"methods"`
	Prefetch       string `js:"prefetch"`
	ReferrerPolicy string `js:"referrerpolicy"`
	Rel            string `js:"rel"`
	Sizes          string `js:"sizes"`
	Target         string `js:"target"`
	Type           string `js:"type"`
}

// A creates a new instance of a <link> element with the provided props and children.
func Link(props *LinkProps, children ...Element) *LinkElem {
	rProps := &_LinkProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &LinkElem{
		Element: createElement("link", rProps, children...),
	}
}

// MainElem is the React element definition corresponding to the HTML <Main> element.
type MainElem struct {
	Element
}

// _MainProps defines the properties for the <Main> element.
type _MainProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <main> element with the provided props and children.
func Main(props *MainProps, children ...Element) *MainElem {
	rProps := &_MainProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MainElem{
		Element: createElement("main", rProps, children...),
	}
}

// MapElem is the React element definition corresponding to the HTML <Map> element.
type MapElem struct {
	Element
}

// _MapProps defines the properties for the <Map> element.
type _MapProps struct {
	*BasicHTMLElement

	Name string `js:"name"`
}

// A creates a new instance of a <map> element with the provided props and children.
func Map(props *MapProps, children ...Element) *MapElem {
	rProps := &_MapProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MapElem{
		Element: createElement("map", rProps, children...),
	}
}

// MarkElem is the React element definition corresponding to the HTML <Mark> element.
type MarkElem struct {
	Element
}

// _MarkProps defines the properties for the <Mark> element.
type _MarkProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <mark> element with the provided props and children.
func Mark(props *MarkProps, children ...Element) *MarkElem {
	rProps := &_MarkProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MarkElem{
		Element: createElement("mark", rProps, children...),
	}
}

// MenuElem is the React element definition corresponding to the HTML <Menu> element.
type MenuElem struct {
	Element
}

// _MenuProps defines the properties for the <Menu> element.
type _MenuProps struct {
	*BasicHTMLElement

	Type string `js:"type"`
}

// A creates a new instance of a <menu> element with the provided props and children.
func Menu(props *MenuProps, children ...Element) *MenuElem {
	rProps := &_MenuProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MenuElem{
		Element: createElement("menu", rProps, children...),
	}
}

// MetaElem is the React element definition corresponding to the HTML <Meta> element.
type MetaElem struct {
	Element
}

// _MetaProps defines the properties for the <Meta> element.
type _MetaProps struct {
	*BasicHTMLElement

	CharSet   string `js:"charset"`
	Content   string `js:"content"`
	HTTPEquiv string `js:"httpequiv"`
	Name      string `js:"name"`
}

// A creates a new instance of a <meta> element with the provided props and children.
func Meta(props *MetaProps, children ...Element) *MetaElem {
	rProps := &_MetaProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MetaElem{
		Element: createElement("meta", rProps, children...),
	}
}

// MeterElem is the React element definition corresponding to the HTML <Meter> element.
type MeterElem struct {
	Element
}

// _MeterProps defines the properties for the <Meter> element.
type _MeterProps struct {
	*BasicHTMLElement

	Value   float64 `js:"value"`
	Min     float64 `js:"min"`
	Max     float64 `js:"max"`
	Low     float64 `js:"low"`
	High    float64 `js:"high"`
	Optimum float64 `js:"optimum"`
	Form    string  `js:"form"`
}

// A creates a new instance of a <meter> element with the provided props and children.
func Meter(props *MeterProps, children ...Element) *MeterElem {
	rProps := &_MeterProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &MeterElem{
		Element: createElement("meter", rProps, children...),
	}
}

// NoScriptElem is the React element definition corresponding to the HTML <NoScript> element.
type NoScriptElem struct {
	Element
}

// _NoScriptProps defines the properties for the <NoScript> element.
type _NoScriptProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <noscript> element with the provided props and children.
func NoScript(props *NoScriptProps, children ...Element) *NoScriptElem {
	rProps := &_NoScriptProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &NoScriptElem{
		Element: createElement("noscript", rProps, children...),
	}
}

// ObjectElem is the React element definition corresponding to the HTML <Object> element.
type ObjectElem struct {
	Element
}

// _ObjectProps defines the properties for the <Object> element.
type _ObjectProps struct {
	*BasicHTMLElement

	Data          string `js:"data"`
	Form          string `js:"form"`
	Height        string `js:"height"`
	Name          string `js:"name"`
	Type          string `js:"type"`
	TypeMustMatch string `js:"typemustmatch"`
	UseMap        string `js:"usemap"`
	Width         string `js:"width"`
}

// A creates a new instance of a <object> element with the provided props and children.
func Object(props *ObjectProps, children ...Element) *ObjectElem {
	rProps := &_ObjectProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ObjectElem{
		Element: createElement("object", rProps, children...),
	}
}

// OlElem is the React element definition corresponding to the HTML <Ol> element.
type OlElem struct {
	Element
}

// _OlProps defines the properties for the <Ol> element.
type _OlProps struct {
	*BasicHTMLElement

	Compact  string `js:"compact"`
	Reversed bool   `js:"reversed"`
	Start    string `js:"start"`
	Type     string `js:"type"`
}

// A creates a new instance of a <ol> element with the provided props and children.
func Ol(props *OlProps, children ...Element) *OlElem {
	rProps := &_OlProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &OlElem{
		Element: createElement("ol", rProps, children...),
	}
}

// OptGroupElem is the React element definition corresponding to the HTML <OptGroup> element.
type OptGroupElem struct {
	Element
}

// _OptGroupProps defines the properties for the <OptGroup> element.
type _OptGroupProps struct {
	*BasicHTMLElement

	Disabled bool   `js:"disabled"`
	Label    string `js:"label"`
}

// A creates a new instance of a <optgroup> element with the provided props and children.
func OptGroup(props *OptGroupProps, children ...Element) *OptGroupElem {
	rProps := &_OptGroupProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &OptGroupElem{
		Element: createElement("optgroup", rProps, children...),
	}
}

// OutputElem is the React element definition corresponding to the HTML <Output> element.
type OutputElem struct {
	Element
}

// _OutputProps defines the properties for the <Output> element.
type _OutputProps struct {
	*BasicHTMLElement

	For  string `js:"for"`
	Form string `js:"form"`
	Name string `js:"name"`
}

// A creates a new instance of a <output> element with the provided props and children.
func Output(props *OutputProps, children ...Element) *OutputElem {
	rProps := &_OutputProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &OutputElem{
		Element: createElement("output", rProps, children...),
	}
}

// ParamElem is the React element definition corresponding to the HTML <Param> element.
type ParamElem struct {
	Element
}

// _ParamProps defines the properties for the <Param> element.
type _ParamProps struct {
	*BasicHTMLElement

	Name  string `js:"name"`
	Value string `js:"value"`
}

// A creates a new instance of a <param> element with the provided props and children.
func Param(props *ParamProps, children ...Element) *ParamElem {
	rProps := &_ParamProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ParamElem{
		Element: createElement("param", rProps, children...),
	}
}

// PictureElem is the React element definition corresponding to the HTML <Picture> element.
type PictureElem struct {
	Element
}

// _PictureProps defines the properties for the <Picture> element.
type _PictureProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <picture> element with the provided props and children.
func Picture(props *PictureProps, children ...Element) *PictureElem {
	rProps := &_PictureProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &PictureElem{
		Element: createElement("picture", rProps, children...),
	}
}

// ProgressElem is the React element definition corresponding to the HTML <Progress> element.
type ProgressElem struct {
	Element
}

// _ProgressProps defines the properties for the <Progress> element.
type _ProgressProps struct {
	*BasicHTMLElement

	Max   float64 `js:"max"`
	Value float64 `js:"value"`
}

// A creates a new instance of a <progress> element with the provided props and children.
func Progress(props *ProgressProps, children ...Element) *ProgressElem {
	rProps := &_ProgressProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ProgressElem{
		Element: createElement("progress", rProps, children...),
	}
}

// QElem is the React element definition corresponding to the HTML <Q> element.
type QElem struct {
	Element
}

// _QProps defines the properties for the <Q> element.
type _QProps struct {
	*BasicHTMLElement

	Cite string `js:"cite"`
}

// A creates a new instance of a <q> element with the provided props and children.
func Q(props *QProps, children ...Element) *QElem {
	rProps := &_QProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &QElem{
		Element: createElement("q", rProps, children...),
	}
}

// RPElem is the React element definition corresponding to the HTML <RP> element.
type RPElem struct {
	Element
}

// _RPProps defines the properties for the <RP> element.
type _RPProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <rp> element with the provided props and children.
func RP(props *RPProps, children ...Element) *RPElem {
	rProps := &_RPProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &RPElem{
		Element: createElement("rp", rProps, children...),
	}
}

// RTElem is the React element definition corresponding to the HTML <RT> element.
type RTElem struct {
	Element
}

// _RTProps defines the properties for the <RT> element.
type _RTProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <rt> element with the provided props and children.
func RT(props *RTProps, children ...Element) *RTElem {
	rProps := &_RTProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &RTElem{
		Element: createElement("rt", rProps, children...),
	}
}

// RTCElem is the React element definition corresponding to the HTML <RTC> element.
type RTCElem struct {
	Element
}

// _RTCProps defines the properties for the <RTC> element.
type _RTCProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <rtc> element with the provided props and children.
func RTC(props *RTCProps, children ...Element) *RTCElem {
	rProps := &_RTCProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &RTCElem{
		Element: createElement("rtc", rProps, children...),
	}
}

// RubyElem is the React element definition corresponding to the HTML <Ruby> element.
type RubyElem struct {
	Element
}

// _RubyProps defines the properties for the <Ruby> element.
type _RubyProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <ruby> element with the provided props and children.
func Ruby(props *RubyProps, children ...Element) *RubyElem {
	rProps := &_RubyProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &RubyElem{
		Element: createElement("ruby", rProps, children...),
	}
}

// SampElem is the React element definition corresponding to the HTML <Samp> element.
type SampElem struct {
	Element
}

// _SampProps defines the properties for the <Samp> element.
type _SampProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <samp> element with the provided props and children.
func Samp(props *SampProps, children ...Element) *SampElem {
	rProps := &_SampProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SampElem{
		Element: createElement("samp", rProps, children...),
	}
}

// ScriptElem is the React element definition corresponding to the HTML <Script> element.
type ScriptElem struct {
	Element
}

// _ScriptProps defines the properties for the <Script> element.
type _ScriptProps struct {
	*BasicHTMLElement

	Async       string `js:"async"`
	CrossOrigin string `js:"crossorigin"`
	Defer       string `js:"defer"`
	Integrity   string `js:"integrity"`
	NoModule    string `js:"nomodule"`
	Nonce       string `js:"nonce"`
	Src         string `js:"src"`
	Text        string `js:"text"`
	Type        string `js:"type"`
}

// A creates a new instance of a <script> element with the provided props and children.
func Script(props *ScriptProps, children ...Element) *ScriptElem {
	rProps := &_ScriptProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ScriptElem{
		Element: createElement("script", rProps, children...),
	}
}

// SectionElem is the React element definition corresponding to the HTML <Section> element.
type SectionElem struct {
	Element
}

// _SectionProps defines the properties for the <Section> element.
type _SectionProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <section> element with the provided props and children.
func Section(props *SectionProps, children ...Element) *SectionElem {
	rProps := &_SectionProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SectionElem{
		Element: createElement("section", rProps, children...),
	}
}

// SlotElem is the React element definition corresponding to the HTML <Slot> element.
type SlotElem struct {
	Element
}

// _SlotProps defines the properties for the <Slot> element.
type _SlotProps struct {
	*BasicHTMLElement

	Name string `js:"name"`
}

// A creates a new instance of a <slot> element with the provided props and children.
func Slot(props *SlotProps, children ...Element) *SlotElem {
	rProps := &_SlotProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SlotElem{
		Element: createElement("slot", rProps, children...),
	}
}

// SmallElem is the React element definition corresponding to the HTML <Small> element.
type SmallElem struct {
	Element
}

// _SmallProps defines the properties for the <Small> element.
type _SmallProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <small> element with the provided props and children.
func Small(props *SmallProps, children ...Element) *SmallElem {
	rProps := &_SmallProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SmallElem{
		Element: createElement("small", rProps, children...),
	}
}

// SourceElem is the React element definition corresponding to the HTML <Source> element.
type SourceElem struct {
	Element
}

// _SourceProps defines the properties for the <Source> element.
type _SourceProps struct {
	*BasicHTMLElement

	Sizes  string `js:"sizes"`
	Src    string `js:"src"`
	SrcSet string `js:"srcset"`
	Type   string `js:"type"`
	Media  string `js:"media"`
}

// A creates a new instance of a <source> element with the provided props and children.
func Source(props *SourceProps, children ...Element) *SourceElem {
	rProps := &_SourceProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SourceElem{
		Element: createElement("source", rProps, children...),
	}
}

// StrikeElem is the React element definition corresponding to the HTML <Strike> element.
type StrikeElem struct {
	Element
}

// _StrikeProps defines the properties for the <Strike> element.
type _StrikeProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <strike> element with the provided props and children.
func Strike(props *StrikeProps, children ...Element) *StrikeElem {
	rProps := &_StrikeProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &StrikeElem{
		Element: createElement("strike", rProps, children...),
	}
}

// StrongElem is the React element definition corresponding to the HTML <Strong> element.
type StrongElem struct {
	Element
}

// _StrongProps defines the properties for the <Strong> element.
type _StrongProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <strong> element with the provided props and children.
func Strong(props *StrongProps, children ...Element) *StrongElem {
	rProps := &_StrongProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &StrongElem{
		Element: createElement("strong", rProps, children...),
	}
}

// StyleElem is the React element definition corresponding to the HTML <Style> element.
type StyleElem struct {
	Element
}

// _StyleProps defines the properties for the <Style> element.
type _StyleProps struct {
	*BasicHTMLElement

	Type  string `js:"type"`
	Media string `js:"media"`
	Nonce string `js:"nonce"`
}

// A creates a new instance of a <style> element with the provided props and children.
func Style(props *StyleProps, children ...Element) *StyleElem {
	rProps := &_StyleProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &StyleElem{
		Element: createElement("style", rProps, children...),
	}
}

// SubElem is the React element definition corresponding to the HTML <Sub> element.
type SubElem struct {
	Element
}

// _SubProps defines the properties for the <Sub> element.
type _SubProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <sub> element with the provided props and children.
func Sub(props *SubProps, children ...Element) *SubElem {
	rProps := &_SubProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &SubElem{
		Element: createElement("sub", rProps, children...),
	}
}

// TbodyElem is the React element definition corresponding to the HTML <Tbody> element.
type TbodyElem struct {
	Element
}

// _TbodyProps defines the properties for the <Tbody> element.
type _TbodyProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
}

// A creates a new instance of a <tbody> element with the provided props and children.
func Tbody(props *TbodyProps, children ...Element) *TbodyElem {
	rProps := &_TbodyProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TbodyElem{
		Element: createElement("tbody", rProps, children...),
	}
}

// TdElem is the React element definition corresponding to the HTML <Td> element.
type TdElem struct {
	Element
}

// _TdProps defines the properties for the <Td> element.
type _TdProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
	ColSpan string `js:"colspan"`
	Headers string `js:"headers"`
	RowSpan string `js:"rowspan"`
}

// A creates a new instance of a <td> element with the provided props and children.
func Td(props *TdProps, children ...Element) *TdElem {
	rProps := &_TdProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TdElem{
		Element: createElement("td", rProps, children...),
	}
}

// TemplateElem is the React element definition corresponding to the HTML <Template> element.
type TemplateElem struct {
	Element
}

// _TemplateProps defines the properties for the <Template> element.
type _TemplateProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <template> element with the provided props and children.
func Template(props *TemplateProps, children ...Element) *TemplateElem {
	rProps := &_TemplateProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TemplateElem{
		Element: createElement("template", rProps, children...),
	}
}

// TfootElem is the React element definition corresponding to the HTML <Tfoot> element.
type TfootElem struct {
	Element
}

// _TfootProps defines the properties for the <Tfoot> element.
type _TfootProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
}

// A creates a new instance of a <tfoot> element with the provided props and children.
func Tfoot(props *TfootProps, children ...Element) *TfootElem {
	rProps := &_TfootProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TfootElem{
		Element: createElement("tfoot", rProps, children...),
	}
}

// ThElem is the React element definition corresponding to the HTML <Th> element.
type ThElem struct {
	Element
}

// _ThProps defines the properties for the <Th> element.
type _ThProps struct {
	*BasicHTMLElement

	Abbr    string `js:"abbr"`
	BGColor string `js:"bgcolor"`
	ColSpan string `js:"colspan"`
	Headers string `js:"headers"`
	RowSpan string `js:"rowspan"`
	Scope   string `js:"scope"`
}

// A creates a new instance of a <th> element with the provided props and children.
func Th(props *ThProps, children ...Element) *ThElem {
	rProps := &_ThProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &ThElem{
		Element: createElement("th", rProps, children...),
	}
}

// TheadElem is the React element definition corresponding to the HTML <Thead> element.
type TheadElem struct {
	Element
}

// _TheadProps defines the properties for the <Thead> element.
type _TheadProps struct {
	*BasicHTMLElement

	BGColor string `js:"bgcolor"`
}

// A creates a new instance of a <thead> element with the provided props and children.
func Thead(props *TheadProps, children ...Element) *TheadElem {
	rProps := &_TheadProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TheadElem{
		Element: createElement("thead", rProps, children...),
	}
}

// TimeElem is the React element definition corresponding to the HTML <Time> element.
type TimeElem struct {
	Element
}

// _TimeProps defines the properties for the <Time> element.
type _TimeProps struct {
	*BasicHTMLElement

	DateTime string `js:"datetime"`
}

// A creates a new instance of a <time> element with the provided props and children.
func Time(props *TimeProps, children ...Element) *TimeElem {
	rProps := &_TimeProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TimeElem{
		Element: createElement("time", rProps, children...),
	}
}

// TitleElem is the React element definition corresponding to the HTML <Title> element.
type TitleElem struct {
	Element
}

// _TitleProps defines the properties for the <Title> element.
type _TitleProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <title> element with the provided props and children.
func Title(props *TitleProps, children ...Element) *TitleElem {
	rProps := &_TitleProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TitleElem{
		Element: createElement("title", rProps, children...),
	}
}

// TrElem is the React element definition corresponding to the HTML <Tr> element.
type TrElem struct {
	Element
}

// _TrProps defines the properties for the <Tr> element.
type _TrProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <tr> element with the provided props and children.
func Tr(props *TrProps, children ...Element) *TrElem {
	rProps := &_TrProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TrElem{
		Element: createElement("tr", rProps, children...),
	}
}

// TrackElem is the React element definition corresponding to the HTML <Track> element.
type TrackElem struct {
	Element
}

// _TrackProps defines the properties for the <Track> element.
type _TrackProps struct {
	*BasicHTMLElement

	Default bool   `js:"default"`
	Kind    string `js:"kind"`
	Label   string `js:"label"`
	Src     string `js:"src"`
	SrcLang string `js:"srclang"`
}

// A creates a new instance of a <track> element with the provided props and children.
func Track(props *TrackProps, children ...Element) *TrackElem {
	rProps := &_TrackProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &TrackElem{
		Element: createElement("track", rProps, children...),
	}
}

// UElem is the React element definition corresponding to the HTML <U> element.
type UElem struct {
	Element
}

// _UProps defines the properties for the <U> element.
type _UProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <u> element with the provided props and children.
func U(props *UProps, children ...Element) *UElem {
	rProps := &_UProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &UElem{
		Element: createElement("u", rProps, children...),
	}
}

// VarElem is the React element definition corresponding to the HTML <Var> element.
type VarElem struct {
	Element
}

// _VarProps defines the properties for the <Var> element.
type _VarProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <var> element with the provided props and children.
func Var(props *VarProps, children ...Element) *VarElem {
	rProps := &_VarProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &VarElem{
		Element: createElement("var", rProps, children...),
	}
}

// VideoElem is the React element definition corresponding to the HTML <Video> element.
type VideoElem struct {
	Element
}

// _VideoProps defines the properties for the <Video> element.
type _VideoProps struct {
	*BasicHTMLElement

	Autoplay    string `js:"autoplay"`
	Buffered    string `js:"buffered"`
	Controls    string `js:"controls"`
	CrossOrigin string `js:"crossorigin"`
	Height      string `js:"height"`
	Loop        string `js:"loop"`
	Muted       string `js:"muted"`
	Played      string `js:"played"`
	Preload     string `js:"preload"`
	Poster      string `js:"poster"`
	Src         string `js:"src"`
	Width       string `js:"width"`
	PlaysInline string `js:"playsinline"`
}

// A creates a new instance of a <video> element with the provided props and children.
func Video(props *VideoProps, children ...Element) *VideoElem {
	rProps := &_VideoProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &VideoElem{
		Element: createElement("video", rProps, children...),
	}
}

// WbrElem is the React element definition corresponding to the HTML <Wbr> element.
type WbrElem struct {
	Element
}

// _WbrProps defines the properties for the <Wbr> element.
type _WbrProps struct {
	*BasicHTMLElement
}

// A creates a new instance of a <wbr> element with the provided props and children.
func Wbr(props *WbrProps, children ...Element) *WbrElem {
	rProps := &_WbrProps{
		BasicHTMLElement: newBasicHTMLElement(),
	}

	if props != nil {
		props.assign(rProps)
	}

	return &WbrElem{
		Element: createElement("wbr", rProps, children...),
	}
}
